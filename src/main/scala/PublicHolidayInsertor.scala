import java.io.{PrintWriter, File}
import java.sql.{ResultSet, DriverManager}

import com.typesafe.scalalogging.LazyLogging
import enums.DateFormat
import org.joda.time.{DateTimeZone, DateTime}
import utils.{DateUtils, FileUtils}

import scala.collection.mutable.ListBuffer
import scala.io.Source
import scala.util.Try

/**
  * Created by myuan on 18/12/15.
  */

case class Building(uid: Long, name: String, state:String)
case class Holiday(date: DateTime, name: String)

object State extends Enumeration {
  type State = Value
  val NSW, VIC, QLD, SA, WA, ACT = Value
}

object PublicHolidayInsertor extends LazyLogging {

  val InsertQueryHeader = "INSERT INTO PS.BEI_HOLIDAY(DATE, DESCRIPTION, ENTITYUID, NAME, STATE, TYPE) VALUES" + System.lineSeparator()
  val InsertQueryBodyBuilding = "('%s', 'Generated By Bulk Upload', %d, '%s', '%s', 'BUILDING')%s" + System.lineSeparator()
  val InsertQueryBodyBuildingWater = "('%s', 'Generated By Bulk Upload', %d, '%s', '%s', 'BUILDING_WATER')%s" + System.lineSeparator()
  val DefaultTimeZone = DateTimeZone.UTC

  def main(args: Array[String]): Unit = {
    val buildings = getBuildings
    val holidayMap = getPublicHolidays("/home/myuan/Downloads/2016 Public Holidays")
    generatorBuildingHolidays(buildings, holidayMap, "/home/myuan/refHolidays.txt", InsertQueryHeader, InsertQueryBodyBuilding)
    generatorBuildingHolidays(buildings, holidayMap, "/home/myuan/refWaterHolidays.txt", InsertQueryHeader, InsertQueryBodyBuildingWater)
  }

  def generatorBuildingHolidays(buildings : List[Building], holidayMap : Map[String, List[Holiday]], file: String, headerQuery: String, bodyQuery: String) = {
    val writer = new PrintWriter(new File(file))
    for (building <- buildings) {
      val holidays = holidayMap.get(building.state)
      if (holidays.isDefined) {
        writeToFile(writer, building, holidays.get, headerQuery, bodyQuery)
      }
    }
    writer.close
    logger.info("Please check sql query at " + file)
  }

  def getBuildings: List[Building] = {
    val buildings = ListBuffer.empty[Building]
    // MY: need to set up the ssh tunnel to REF5 or REF6, need to change database/username/password to right values
    val conn_str_reftest = "jdbc:derby://localhost:18741/database;user=user;password=password"
    val conn_str_ref6 = "jdbc:derby://localhost:18761/database;user=user;password=password"
    val conn = DriverManager.getConnection(conn_str_ref6)
    try {
      val statement = conn.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY)
      val rs = statement.executeQuery("SELECT * FROM BEI_BUILDING where ASSETTYPE_UID in (1, 3, 5) order by UID")
      while (rs.next) {
        //logger.info(rs.getString("name") + " ,uid: " + rs.getLong("UID"))
        buildings += Building(rs.getLong("UID"), rs.getString("name"), rs.getString("state"))
      }
    }
    finally {
      conn.close
    }
    logger.info("Get " + buildings.size + " buildings from DB")
    buildings.toList
  }

  def getPublicHolidays(folder: String): Map[String, List[Holiday]] = {
    val holidayMap = scala.collection.mutable.Map[String, List[Holiday]]()
    val files = FileUtils.getListOfFiles(folder)
    for (file <- files if file.getName.endsWith(".csv") || file.getName.endsWith(".CSV")) {
      val state = getStateFromFile(file)
      if(state.isEmpty) {
        logger.error("Skip " + file.getName + " as no right state found!")
      } else {
        holidayMap.put(state.get, getHolidaysFromFile(file, state.get).getOrElse(List.empty[Holiday]))
      }
    }
    holidayMap.toMap
  }

  def getStateFromFile(file: File) : Option[String] = {
    Try {
      val tokens = file.getName.split("\\s")
      val state = State.withName(tokens(0))
      logger.info("Load {} holidays from {}", state, file.getName)
      Some(state.toString)
    } getOrElse None
  }

  def getHolidaysFromFile(file: File, state: String) : Option[List[Holiday]] = {
    val holidays = ListBuffer.empty[Holiday]
    for(line <- Source.fromFile(file).getLines()) {
      val tokens = line.split(",")
      if (tokens.length != 3) {
        logger.info("Skip line " + line)
      } else {
        if (!tokens(2).equals(state)) {
          logger.error("Wrong state in line " + line)
          return None
        }
        holidays += Holiday(DateUtils.getDateTimeWithZone(tokens(0))(DateFormat.`dd/MM/yyyy`)(DefaultTimeZone), tokens(1))
      }
    }
    logger.info("{} holidays loaded...", holidays.length.toString)
    Some(holidays.toList)
  }

  def writeToFile(writer: PrintWriter, building: Building, holidays: List[Holiday], headerQuery: String, bodyQuery: String): Unit = {
    writer.append("----------------- for %s--------------------- %s".format(building.name, System.lineSeparator()))
    writer.append(headerQuery)
    holidays.init.map(holiday => writer.append(bodyQuery.format(getHolidaysInQuery(holiday), building.uid, holiday.name
      , building.state, ",")))
    writer.append(bodyQuery.format(getHolidaysInQuery(holidays.last), building.uid, holidays.last.name
      , building.state, ";"))
    writer.append(System.lineSeparator())
  }

  def getHolidaysInQuery (holiday: Holiday) : String = {
    DateUtils.getDateTimeString(holiday.date)(DateFormat.yyyyMMdd)(DefaultTimeZone)
  }
}